//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: NWizards.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "NWizards_wdr.cpp"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "NWizards_wdr.h"


// Custom source
/* 
    GNU Messenger - The secure instant messenger
    Copyright (C) 2001  Jesse Lovelace
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Implement window functions

wxSizer *uWiz1( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );
    item0->AddGrowableRow( 1 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, 
        "Welcome to the new user wizard, please select a\n"
        "username and password.",
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxFlexGridSizer *item2 = new wxFlexGridSizer( 2, 0, 0 );
    item2->AddGrowableCol( 1 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, "Username:", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_U_NAME, "", wxDefaultPosition, wxSize(160,-1), 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Password:", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_U_PASS1, "", wxDefaultPosition, wxSize(130,-1), wxTE_PASSWORD );
    item2->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, "Password (again):", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_U_PASS2, "", wxDefaultPosition, wxSize(80,-1), wxTE_PASSWORD );
    item2->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *uWiz2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 2 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, 
        "Please select the network(s) you would like to\n"
        "use with NNIM.  You may use multiple screen\n"
        "names on each network.",
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );
    item3->AddGrowableCol( 0 );
    item3->AddGrowableCol( 1 );
    item3->AddGrowableRow( 0 );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 1, 0, 0 );
    item4->AddGrowableCol( 0 );
    item4->AddGrowableRow( 1 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Available nets:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString strs6[] = 
    {
        "ListItem"
    };
    wxListBox *item6 = new wxListBox( parent, ID_U_ALLNETS, wxDefaultPosition, wxSize(110,100), 1, strs6, wxLB_SINGLE );
    item4->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxButton *item7 = new wxButton( parent, ID_U_ADDNET, "Add Network", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5 );

    item3->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    wxFlexGridSizer *item8 = new wxFlexGridSizer( 1, 0, 0 );
    item8->AddGrowableCol( 0 );
    item8->AddGrowableRow( 1 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Configured nets:", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxListCtrl *item10 = new wxListCtrl( parent, ID_U_CONFNETS, wxDefaultPosition, wxSize(180,100), wxLC_REPORT|wxSUNKEN_BORDER );
    item8->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_U_REMNET, "Remove Network", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5 );

    item3->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *cWiz1( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );
    item0->AddGrowableRow( 1 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, 
        "Welcome to the new contact wizard, please enter\n"
        "this contact's name, this does not need to be \n"
        "their screen name.",
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxFlexGridSizer *item2 = new wxFlexGridSizer( 2, 0, 0 );
    item2->AddGrowableCol( 1 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, "Name:", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_C_NAME, "", wxDefaultPosition, wxSize(160,-1), 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item2, 0, wxGROW|wxALL, 5 );

    wxCheckBox *item5 = new wxCheckBox( parent, ID_C_WIZ_EDIT, "Edit User Info", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *cWiz2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 2 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, 
        "Please select the network(s) you would like to\n"
        "use to reach this contact.",
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );
    item3->AddGrowableCol( 0 );
    item3->AddGrowableCol( 1 );
    item3->AddGrowableRow( 0 );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 1, 0, 0 );
    item4->AddGrowableCol( 0 );
    item4->AddGrowableRow( 1 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Available nets:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString strs6[] = 
    {
        "ListItem"
    };
    wxListBox *item6 = new wxListBox( parent, ID_C_ALLNET, wxDefaultPosition, wxSize(80,100), 1, strs6, wxLB_SINGLE );
    item4->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_C_ADDNET, "Add Network", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5 );

    item3->Add( item4, 0, wxGROW|wxALL, 5 );

    wxFlexGridSizer *item8 = new wxFlexGridSizer( 1, 0, 0 );
    item8->AddGrowableCol( 0 );
    item8->AddGrowableRow( 1 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Configured nets:", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxListCtrl *item10 = new wxListCtrl( parent, ID_C_CONFNET, wxDefaultPosition, wxSize(160,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item8->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_C_REMNET, "Remove Network", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5 );

    item3->Add( item8, 0, wxGROW|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *genPrefs( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, "General Preferences", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *secPrefs( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, "Security Preferences", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *ViewAway( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, "Contact info:", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxWindow *item2 = parent->FindWindow( ID_VIEW_INFO_HTML );
    wxASSERT( item2 );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, ID_VIEW_INFO_CLOSE, "Close", wxDefaultPosition, wxDefaultSize, 0 );
    item3->SetDefault();
    item0->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *AddAway( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 3 );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );
    item1->AddGrowableCol( 1 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Title", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_ADD_AWAY_TITLE, "", wxDefaultPosition, wxSize(120,-1), 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, "Type Away Message:", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item5 = new wxFlexGridSizer( 6, 0, 0 );
    item5->AddGrowableCol( 0 );
    item5->AddGrowableCol( 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, "Colour", wxDefaultPosition, wxDefaultSize, 0 );
    item6->SetForegroundColour( *wxBLUE );
    item5->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item7 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item5->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, "Size", wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticLine *item9 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item5->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, "B", wxDefaultPosition, wxDefaultSize, 0 );
    item10->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
#if defined(__WXMSW__) && !(wxCHECK_VERSION(2,3,0))
    item10->SetSize( item10->GetBestSize() );
#endif
    item5->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "I", wxDefaultPosition, wxDefaultSize, 0 );
    item11->SetFont( wxFont( 12, wxROMAN, wxITALIC, wxNORMAL ) );
#if defined(__WXMSW__) && !(wxCHECK_VERSION(2,3,0))
    item11->SetSize( item11->GetBestSize() );
#endif
    item5->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_TEXTCTRL, "", wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE );
    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_ADD_AWAY_SAVE, "Save this away message?", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item13, 0, wxALIGN_CENTRE|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *UserTree( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 2 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, 
        "For every contact you can store an unlimited*\n"
        "amount of information using NNIM's information\n"
        "tree.",
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTreeCtrl *item3 = new wxTreeCtrl( parent, ID_USER_INFO_TREE, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxButton *item5 = new wxButton( parent, ID_USER_INFO_ADD, "Add Item", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_USER_INFO_REM, "Remove Item", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
